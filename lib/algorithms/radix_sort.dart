import 'dart:math' as math;

import '../models/sort_step.dart';
import '../models/sorting_algorithm.dart';

class RadixSort extends SortingAlgorithm {
  List<SortStep> _steps = [];

  @override
  String get name => 'Radix Sort';

  @override
  String get description =>
      'Ordena por d√≠gitos usando counting sort como subrutina. No basado en comparaciones. Complejidad: O(d√ón) - Estable';

  @override
  String get timeComplexity => 'O(d√ón)';

  @override
  String get spaceComplexity => 'O(n)';

  @override
  bool get isStable => true;

  @override
  List<String> get advantages => [
    'Complejidad lineal O(d√ón) para enteros',
    'No basado en comparaciones',
    'Algoritmo estable',
    'Eficiente para n√∫meros con pocos d√≠gitos',
    'Predecible en rendimiento',
  ];

  @override
  List<String> get disadvantages => [
    'Solo funciona con enteros no negativos',
    'Requiere memoria adicional O(n)',
    'Rendimiento depende del n√∫mero de d√≠gitos',
    'Menos eficiente para n√∫meros muy grandes',
  ];

  @override
  List<String> get pseudocode => [
    'function radixSort(arr):',
    '    max = findMax(arr)',
    '    for exp = 1; max / exp > 0; exp *= 10:',
    '        countingSort(arr, exp)',
    '    return arr',
    '',
    'function countingSort(arr, exp):',
    '    count = [0] * 10',
    '    for i = 0 to length(arr) - 1:',
    '        digit = (arr[i] / exp) % 10',
    '        count[digit]++',
    '    for i = 1 to 9:',
    '        count[i] += count[i - 1]',
    '    for i = length(arr) - 1 down to 0:',
    '        digit = (arr[i] / exp) % 10',
    '        output[count[digit] - 1] = arr[i]',
    '        count[digit]--',
    '    copy output to arr',
  ];

  @override
  String getTimeComplexityExplanation() {
    return 'O(d√ón) donde d es el n√∫mero de d√≠gitos del n√∫mero m√°s grande y n es el n√∫mero de elementos. Para cada d√≠gito, se realiza un counting sort que toma O(n) tiempo. Como d es t√≠picamente peque√±o y constante, se comporta como O(n) en la pr√°ctica.';
  }

  @override
  String getSpaceComplexityExplanation() {
    return 'O(n) porque necesita un array auxiliar del mismo tama√±o que el input para el counting sort, m√°s un array de conteo de tama√±o 10 (para los d√≠gitos 0-9).';
  }

  @override
  String getStabilityExplanation() {
    return 'Es estable porque el counting sort subyacente es estable. Al procesar desde el √∫ltimo √≠ndice hacia atr√°s, se preserva el orden relativo de elementos con el mismo d√≠gito en la posici√≥n actual.';
  }

  @override
  List<SortStep> sort(List<int> array) {
    _steps = [];
    List<int> arr = List.from(array);

    _steps.add(
      SortStep(
        array: List.from(arr),
        description: 'üéØ Radix Sort: Ordenamiento por d√≠gitos (LSD - Least Significant Digit)',
        currentPseudocodeLine: 0,
      ),
    );

    // Find the maximum number to know number of digits
    int max = arr.reduce(math.max);

    _steps.add(
      SortStep(
        array: List.from(arr),
        description: 'üîç N√∫mero m√°ximo encontrado: $max (determina n√∫mero de d√≠gitos)',
        currentPseudocodeLine: 1,
      ),
    );

    // Do counting sort for every digit
    for (int exp = 1; max ~/ exp > 0; exp *= 10) {
      int digit = math.log(exp) ~/ math.log(10) + 1;
      _steps.add(
        SortStep(
          array: List.from(arr),
          description: 'üî¢ Procesando d√≠gito $digit (posici√≥n $exp): Ordenando por d√≠gito desde la derecha',
          currentPseudocodeLine: 2,
        ),
      );

      _countingSort(arr, exp);
    }

    _steps.add(
      SortStep(
        array: List.from(arr),
        sorted: List.generate(arr.length, (index) => index),
        description: 'üéâ ¬°Radix Sort completado! Todos los d√≠gitos procesados',
        currentPseudocodeLine: 4,
      ),
    );

    return _steps;
  }

  void _countingSort(List<int> arr, int exp) {
    int n = arr.length;
    List<int> output = List.filled(n, 0);
    List<int> count = List.filled(10, 0);

    _steps.add(
      SortStep(
        array: List.from(arr),
        description: 'üìä Iniciando counting sort para d√≠gito en posici√≥n $exp',
        currentPseudocodeLine: 6,
      ),
    );

    // Store count of occurrences in count[]
    for (int i = 0; i < n; i++) {
      int digit = (arr[i] ~/ exp) % 10;
      count[digit]++;

      _steps.add(
        SortStep(
          array: List.from(arr),
          comparing: [i],
          description: 'üî¢ arr[$i] = ${arr[i]}, d√≠gito en posici√≥n $exp: $digit',
          currentPseudocodeLine: 8,
        ),
      );
    }

    _steps.add(SortStep(array: List.from(arr), description: 'üìà Conteo de d√≠gitos: $count', currentPseudocodeLine: 10));

    // Change count[i] so that count[i] now contains actual position of this digit in output[]
    for (int i = 1; i < 10; i++) {
      count[i] += count[i - 1];
    }

    _steps.add(
      SortStep(array: List.from(arr), description: 'üìê Posiciones acumuladas: $count', currentPseudocodeLine: 11),
    );

    // Build the output array
    for (int i = n - 1; i >= 0; i--) {
      int digit = (arr[i] ~/ exp) % 10;
      output[count[digit] - 1] = arr[i];
      count[digit]--;

      _steps.add(
        SortStep(
          array: List.from(arr),
          swapping: [i],
          description: 'üì• Colocando ${arr[i]} en posici√≥n ${count[digit]} (d√≠gito $digit)',
          currentPseudocodeLine: 13,
        ),
      );
    }

    // Copy the output array to arr[], so that arr[] now contains sorted numbers according to current digit
    for (int i = 0; i < n; i++) {
      arr[i] = output[i];
    }

    _steps.add(
      SortStep(
        array: List.from(arr),
        description: '‚úÖ Counting sort completado para d√≠gito en posici√≥n $exp',
        currentPseudocodeLine: 17,
      ),
    );
  }
}
